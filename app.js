// Generated by CoffeeScript 1.12.7
(function() {
  process.env["MONGO_CONNECTION_STRING"] = `mongodb://172.17.0.1:27017/sharelatex`;
  var Errors, HttpController, Metrics, Path, Settings, app, bodyParser, express, host, logger, port, ref;

  Metrics = require("metrics-sharelatex");

  Metrics.initialize("contacts");

  Settings = require("settings-sharelatex");

  logger = require("logger-sharelatex");

  express = require("express");

  bodyParser = require("body-parser");

  Errors = require("./app/js/Errors");

  HttpController = require("./app/js/HttpController");

  Path = require("path");

  logger.initialize("contacts");

  if ((ref = Metrics.event_loop) != null) {
    ref.monitor(logger);
  }

  app = express();

  app.use(Metrics.http.monitor(logger));

  Metrics.injectMetricsRoute(app);

  app.get('/user/:user_id/contacts', HttpController.getContacts);

  app.post('/user/:user_id/contacts', bodyParser.json({
    limit: "2mb"
  }), HttpController.addContact);

  app.get('/status', function(req, res) {
    return res.send('contacts is alive');
  });

  app.use(function(error, req, res, next) {
    logger.error({
      err: error
    }, "request errored");
    if (error instanceof Errors.NotFoundError) {
      return res.send(404);
    } else {
      return res.send(500, "Oops, something went wrong");
    }
  });

  port = Settings.internal.contacts.port;

  host = Settings.internal.contacts.host;

  // if (!module.parent) {
    app.listen(port, host, function(error) {
      if (error != null) {
        throw error;
      }
      return logger.info("contacts starting up, listening on " + host + ":" + port);
    });
  // }

  exports.main = main
  function main(params = {}){
    const url = params.__ow_path
    const method = params.__ow_method
    const headers = params.__ow_headers
    
    const { promisify } = require('util')
    const request = require("request")
    const reqPromise = promisify(request[method]);
    return (async () => {
      let result;
      let opt={}
      opt['headers'] = headers;
      opt['url'] = `http://${host}:${port}${url}`;
      let str = params.__ow_body || '';
      if(str !== "" && Buffer.from(str, 'base64').toString('base64') === str){
        // base64
        params.__ow_body = Buffer.from(str, 'base64').toString('ascii');
      }
      opt['body'] = params.__ow_body;
      if(params.__ow_query !== ""){
        const qs = '?' + params.__ow_query;
        opt['url'] = opt['url'] + qs;
      }
      result = await reqPromise(opt);
      var response = JSON.parse(JSON.stringify(result));
      delete response.request
      return response
    })();
  }
}).call(this);

//# sourceMappingURL=app.js.map
