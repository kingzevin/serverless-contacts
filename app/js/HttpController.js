// Generated by CoffeeScript 1.12.7
(function() {
  var ContactManager, HttpController, logger;

  ContactManager = require("./ContactManager");

  logger = require("logger-sharelatex");

  module.exports = HttpController = {
    addContact: function(req, res, next) {
      var contact_id, user_id;
      user_id = req.params.user_id;
      contact_id = req.body.contact_id;
      if ((contact_id == null) || contact_id === "") {
        res.status(400).send("contact_id should be a non-blank string");
        return;
      }
      logger.log({
        user_id: user_id,
        contact_id: contact_id
      }, "adding contact");
      return ContactManager.touchContact(user_id, contact_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return ContactManager.touchContact(contact_id, user_id, function(error) {
          if (error != null) {
            return next(error);
          }
          return res.status(204).end();
        });
      });
    },
    CONTACT_LIMIT: 50,
    getContacts: function(req, res, next) {
      var limit, ref, user_id;
      user_id = req.params.user_id;
      if (((ref = req.query) != null ? ref.limit : void 0) != null) {
        limit = parseInt(req.query.limit, 10);
      } else {
        limit = HttpController.CONTACT_LIMIT;
      }
      limit = Math.min(limit, HttpController.CONTACT_LIMIT);
      logger.log({
        user_id: user_id
      }, "getting contacts");
      return ContactManager.getContacts(user_id, function(error, contact_dict) {
        var contact_ids, contacts, data, ref1;
        if (error != null) {
          return next(error);
        }
        contacts = [];
        ref1 = contact_dict || {};
        for (user_id in ref1) {
          data = ref1[user_id];
          contacts.push({
            user_id: user_id,
            n: data.n,
            ts: data.ts
          });
        }
        HttpController._sortContacts(contacts);
        contacts = contacts.slice(0, limit);
        contact_ids = contacts.map(function(contact) {
          return contact.user_id;
        });
        return res.status(200).send({
          contact_ids: contact_ids
        });
      });
    },
    _sortContacts: function(contacts) {
      return contacts.sort(function(a, b) {
        if (a.n > b.n) {
          return -1;
        } else if (a.n < b.n) {
          return 1;
        } else {
          if (a.ts > b.ts) {
            return -1;
          } else if (a.ts < b.ts) {
            return 1;
          } else {
            return 0;
          }
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=HttpController.js.map
